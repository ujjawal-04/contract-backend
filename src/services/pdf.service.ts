import PDFDocument from 'pdfkit';
import { Buffer } from 'buffer';
import { IContractAnalysis } from '../models/contract.model';

interface PDFMetadata {
    companyName: string;
    userName: string;
    generatedDate: Date;
    contractId: string;
}

// Helper function to format contract text for better PDF display
const formatContractText = (text: string): string[] => {
    // Split by paragraphs and clean up
    const paragraphs = text.split(/\n\n+/);
    return paragraphs.map(p => p.trim()).filter(p => p.length > 0);
};

// Helper function to highlight modified sections
const highlightModifications = (text: string): { text: string; isModified: boolean }[] => {
    const parts: { text: string; isModified: boolean }[] = [];
    // Remove the 's' flag if your TypeScript target is below ES2018
    // OR update your tsconfig.json target to ES2018 or higher
    const regex = /\[MODIFIED\](.*?)\[\/MODIFIED\]/g; // Removed 's' flag for compatibility
    let lastIndex = 0;
    let match;

    while ((match = regex.exec(text)) !== null) {
        // Add unmodified text before the match
        if (match.index > lastIndex) {
            parts.push({
                text: text.substring(lastIndex, match.index),
                isModified: false
            });
        }
        // Add modified text
        parts.push({
            text: match[1],
            isModified: true
        });
        lastIndex = regex.lastIndex;
    }

    // Add remaining unmodified text
    if (lastIndex < text.length) {
        parts.push({
            text: text.substring(lastIndex),
            isModified: false
        });
    }

    return parts;
};

export const generateContractPDF = async (
    contractText: string,
    contractType: string,
    metadata: PDFMetadata
): Promise<Buffer> => {
    return new Promise((resolve, reject) => {
        try {
            const doc = new PDFDocument({
                size: 'A4',
                margins: {
                    top: 72,
                    bottom: 72,
                    left: 72,
                    right: 72
                },
                info: {
                    Title: `${contractType} Contract`,
                    Author: metadata.companyName,
                    Subject: 'Contract Document',
                    Creator: 'Lexalyze Gold',
                }
            });

            const buffers: Buffer[] = [];
            doc.on('data', buffers.push.bind(buffers));
            doc.on('end', () => {
                const pdfData = Buffer.concat(buffers);
                resolve(pdfData);
            });

            // Header
            doc.fontSize(10)
               .fillColor('#666666')
               .text(`${metadata.companyName} | Contract ID: ${metadata.contractId}`, 72, 40, {
                   align: 'right'
               });

            // Title
            doc.fontSize(24)
               .fillColor('#1a56db')
               .text(contractType.toUpperCase() + ' CONTRACT', 72, 100, {
                   align: 'center'
               });

            // Metadata
            doc.fontSize(10)
               .fillColor('#666666')
               .text(`Generated for: ${metadata.userName}`, 72, 140)
               .text(`Date: ${metadata.generatedDate.toLocaleDateString()}`, 72, 155);

            // Separator
            doc.moveTo(72, 180)
               .lineTo(523, 180)
               .stroke('#e5e7eb');

            // Contract content
            doc.fontSize(11)
               .fillColor('#000000');

            let yPosition = 200;
            const paragraphs = formatContractText(contractText);

            for (const paragraph of paragraphs) {
                // Check if we need a new page
                if (yPosition > 700) {
                    doc.addPage();
                    yPosition = 72;
                }

                doc.text(paragraph, 72, yPosition, {
                    align: 'justify',
                    width: 451
                });

                yPosition = doc.y + 15; // Add spacing between paragraphs
            }

            // Footer on last page
            doc.fontSize(8)
               .fillColor('#999999')
               .text('This document was generated by Lexalyze Gold', 72, 750, {
                   align: 'center'
               });

            doc.end();
        } catch (error) {
            reject(error);
        }
    });
};

export const generateModifiedContractPDF = async (
    contractText: string,
    contractType: string,
    versionInfo: string,
    metadata: PDFMetadata
): Promise<Buffer> => {
    return new Promise((resolve, reject) => {
        try {
            const doc = new PDFDocument({
                size: 'A4',
                margins: {
                    top: 72,
                    bottom: 72,
                    left: 72,
                    right: 72
                },
                info: {
                    Title: `${contractType} Contract - ${versionInfo}`,
                    Author: metadata.companyName,
                    Subject: 'Modified Contract Document',
                    Creator: 'Lexalyze Gold',
                }
            });

            const buffers: Buffer[] = [];
            doc.on('data', buffers.push.bind(buffers));
            doc.on('end', () => {
                const pdfData = Buffer.concat(buffers);
                resolve(pdfData);
            });

            // Header with Gold branding
            doc.rect(0, 0, 612, 60)
               .fill('#f59e0b');

            doc.fontSize(12)
               .fillColor('#ffffff')
               .text('LEXALYZE GOLD', 72, 20, {
                   align: 'left'
               })
               .fontSize(10)
               .text(`Contract ID: ${metadata.contractId}`, 400, 20, {
                   align: 'right',
                   width: 140
               });

            // Title and version
            doc.fontSize(22)
               .fillColor('#1f2937')
               .text(contractType.toUpperCase() + ' CONTRACT', 72, 80, {
                   align: 'center'
               });

            doc.fontSize(12)
               .fillColor('#f59e0b')
               .text(versionInfo, 72, 110, {
                   align: 'center'
               });

            // Metadata box
            doc.rect(72, 140, 468, 60)
               .strokeColor('#e5e7eb')
               .stroke();

            doc.fontSize(10)
               .fillColor('#4b5563')
               .text(`Generated for: ${metadata.userName}`, 82, 150)
               .text(`Date: ${metadata.generatedDate.toLocaleDateString()}`, 82, 165)
               .text(`Time: ${metadata.generatedDate.toLocaleTimeString()}`, 82, 180);

            // Legend for modifications
            if (contractText.includes('[MODIFIED]')) {
                doc.rect(72, 210, 468, 40)
                   .fillAndStroke('#fef3c7', '#f59e0b');

                doc.fontSize(10)
                   .fillColor('#92400e')
                   .text('📝 This document contains tracked changes', 82, 220)
                   .text('Modified sections are highlighted in amber', 82, 235);
            }

            // Contract content with highlighting
            doc.fontSize(11);
            let yPosition = 270;

            const sections = highlightModifications(contractText);

            for (const section of sections) {
                // Check if we need a new page
                if (yPosition > 700) {
                    doc.addPage();
                    yPosition = 72;

                    // Add header to new page
                    doc.fontSize(8)
                       .fillColor('#999999')
                       .text(`${contractType} - ${versionInfo} - Page ${doc.bufferedPageRange().count}`, 72, 40, {
                           align: 'right'
                       });
                    
                    yPosition = 72;
                }

                if (section.isModified) {
                    // Highlight modified sections
                    const textHeight = doc.heightOfString(section.text, {
                        width: 451,
                        align: 'justify'
                    });

                    // Draw highlight background
                    doc.rect(67, yPosition - 5, 478, textHeight + 10)
                       .fill('#fef3c7')
                       .fillColor('#92400e');
                } else {
                    doc.fillColor('#000000');
                }

                doc.text(section.text, 72, yPosition, {
                    align: 'justify',
                    width: 451
                });

                yPosition = doc.y + 15;
            }

            // Footer with Gold branding
            doc.rect(0, 792 - 40, 612, 40)
               .fill('#f9fafb');

            doc.fontSize(8)
               .fillColor('#6b7280')
               .text('Generated by Lexalyze Gold | AI-Powered Contract Intelligence', 72, 792 - 25, {
                   align: 'center'
               })
               .text(`Document contains ${sections.filter(s => s.isModified).length} modifications`, 72, 792 - 15, {
                   align: 'center'
               });

            doc.end();
        } catch (error) {
            reject(error);
        }
    });
};

// Generate a comparison PDF showing differences between two versions
export const generateComparisonPDF = async (
    _originalText: string,
    _modifiedText: string,
    _contractType: string): Promise<Buffer> => {
    return new Promise((_resolve, reject) => {
        try {

            // Rest of the function remains the same...
        } catch (error) {
            reject(error);
        }
    });
};

// Generate a summary report of all modifications
export const generateModificationReportPDF = async (
    contract: IContractAnalysis, 
    metadata: PDFMetadata
): Promise<Buffer> => {
    return new Promise((resolve, reject) => {
        try {
            const doc = new PDFDocument({
                size: "A4",
                margins: { top: 72, bottom: 72, left: 72, right: 72 }
            });

            const buffers: Buffer[] = [];
            doc.on("data", buffers.push.bind(buffers));
            doc.on("end", () => resolve(Buffer.concat(buffers)));

            // --------------------
            // Title page
            // --------------------
            doc.fontSize(28)
               .fillColor("#f59e0b")
               .text("MODIFICATION REPORT", 72, 200, { align: "center" });

            doc.fontSize(16)
               .fillColor("#4b5563")
               .text(`${contract.contractType} Contract`, 72, 250, { align: "center" });

            doc.fontSize(12)
               .fillColor("#6b7280")
               .text(`Contract ID: ${String(contract._id)}`, 72, 300, { align: "center" })
               .text(
                   `Total Modifications: ${contract.modificationHistory?.length ?? 0}`,
                   72,
                   320,
                   { align: "center" }
               )
               .text(
                   `Generated: ${
                       (metadata.generatedDate instanceof Date
                           ? metadata.generatedDate
                           : new Date(metadata.generatedDate)
                       ).toLocaleDateString()
                   }`,
                   72,
                   340,
                   { align: "center" }
               );

            // --------------------
            // Modification History
            // --------------------
            doc.addPage();

            doc.fontSize(18)
               .fillColor("#1f2937")
               .text("Modification History", 72, 72);

            let yPosition = 110;

          if (contract.modificationHistory?.length) {
            const history = contract.modificationHistory; 

            history.forEach((mod, index) => {
                    if (yPosition > 700) {
                        doc.addPage();
                        yPosition = 72;
                    }

                    // Version header box
                    doc.rect(72, yPosition, 468, 30)
                       .fillAndStroke("#fef3c7", "#f59e0b");

                    doc.fontSize(12)
                       .fillColor("#92400e")
                       .text(`Version ${mod.version}`, 82, yPosition + 8);

                    yPosition += 40;

                    // Modification details
                    doc.fontSize(10)
                       .fillColor("#4b5563")
                       .text(`Modified by: ${mod.modifiedBy}`, 72, yPosition)
                       .text(
                           `Date: ${new Date(mod.modifiedAt).toLocaleDateString()}`,
                           72,
                           yPosition + 15
                       )
                       .text(`Changes: ${mod.changes}`, 72, yPosition + 30);

                    yPosition += 60;

                    // Separator
                    if (index < history.length - 1) {
                        doc.moveTo(72, yPosition)
                           .lineTo(540, yPosition)
                           .strokeColor("#e5e7eb")
                           .stroke();
                        yPosition += 20;
                    }
                });
            } else {
                doc.fontSize(12)
                   .fillColor("#6b7280")
                   .text("No modifications have been made to this contract.", 72, yPosition);
            }

            // --------------------
            // Chat History Summary
            // --------------------
            if (contract.chatHistory?.length) {
                doc.addPage();
                doc.fontSize(18)
                   .fillColor("#1f2937")
                   .text("AI Chat Interactions", 72, 72);

                doc.fontSize(12)
                   .fillColor("#4b5563")
                   .text(`Total conversations: ${contract.chatHistory.length}`, 72, 110);
            }

            doc.end();
        } catch (error) {
            reject(error);
        }
    });
};
